{"ast":null,"code":"function _slicedToArray(r, e) {\n  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\nimport _formatNumber from '../format.js';\nimport parse from '../parse.js';\nimport isObject from '../helpers/isObject.js';\nexport default function formatNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n    input = _normalizeArguments.input,\n    format = _normalizeArguments.format,\n    options = _normalizeArguments.options,\n    metadata = _normalizeArguments.metadata;\n  return _formatNumber(input, format, options, metadata);\n}\n\n// Sort out arguments\nfunction normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n    _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 5),\n    arg_1 = _Array$prototype$slic2[0],\n    arg_2 = _Array$prototype$slic2[1],\n    arg_3 = _Array$prototype$slic2[2],\n    arg_4 = _Array$prototype$slic2[3],\n    arg_5 = _Array$prototype$slic2[4];\n  var input;\n  var format;\n  var options;\n  var metadata;\n\n  // Sort out arguments.\n\n  // If the phone number is passed as a string.\n  // `format('8005553535', ...)`.\n  if (typeof arg_1 === 'string') {\n    // If country code is supplied.\n    // `format('8005553535', 'RU', 'NATIONAL', [options], metadata)`.\n    if (typeof arg_3 === 'string') {\n      format = arg_3;\n      if (arg_5) {\n        options = arg_4;\n        metadata = arg_5;\n      } else {\n        metadata = arg_4;\n      }\n      input = parse(arg_1, {\n        defaultCountry: arg_2,\n        extended: true\n      }, metadata);\n    }\n    // Just an international phone number is supplied\n    // `format('+78005553535', 'NATIONAL', [options], metadata)`.\n    else {\n      if (typeof arg_2 !== 'string') {\n        throw new Error('`format` argument not passed to `formatNumber(number, format)`');\n      }\n      format = arg_2;\n      if (arg_4) {\n        options = arg_3;\n        metadata = arg_4;\n      } else {\n        metadata = arg_3;\n      }\n      input = parse(arg_1, {\n        extended: true\n      }, metadata);\n    }\n  }\n  // If the phone number is passed as a parsed number object.\n  // `format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', [options], metadata)`.\n  else if (isObject(arg_1)) {\n    input = arg_1;\n    format = arg_2;\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      metadata = arg_3;\n    }\n  } else throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.');\n\n  // Legacy lowercase formats.\n  if (format === 'International') {\n    format = 'INTERNATIONAL';\n  } else if (format === 'National') {\n    format = 'NATIONAL';\n  }\n  return {\n    input: input,\n    format: format,\n    options: options,\n    metadata: metadata\n  };\n}","map":{"version":3,"names":["_formatNumber","parse","isObject","formatNumber","_normalizeArguments","normalizeArguments","arguments","input","format","options","metadata","args","_Array$prototype$slic","Array","prototype","slice","call","_Array$prototype$slic2","_slicedToArray","arg_1","arg_2","arg_3","arg_4","arg_5","defaultCountry","extended","Error","TypeError"],"sources":["C:\\Users\\Nanndikonda Bharath\\OneDrive\\Desktop\\Minor project\\medicine-donation-full\\medicine-donation-full\\frontend\\node_modules\\libphonenumber-js\\source\\legacy\\format.js"],"sourcesContent":["import _formatNumber from '../format.js'\r\nimport parse from '../parse.js'\r\nimport isObject from '../helpers/isObject.js'\r\n\r\nexport default function formatNumber() {\r\n\tconst {\r\n\t\tinput,\r\n\t\tformat,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t} = normalizeArguments(arguments)\r\n\r\n\treturn _formatNumber(input, format, options, metadata)\r\n}\r\n\r\n// Sort out arguments\r\nfunction normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4, arg_5] = Array.prototype.slice.call(args)\r\n\r\n\tlet input\r\n\tlet format\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// Sort out arguments.\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `format('8005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If country code is supplied.\r\n\t\t// `format('8005553535', 'RU', 'NATIONAL', [options], metadata)`.\r\n\t\tif (typeof arg_3 === 'string')\r\n\t\t{\r\n\t\t\tformat = arg_3\r\n\r\n\t\t\tif (arg_5)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_4\r\n\t\t\t\tmetadata = arg_5\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { defaultCountry: arg_2, extended: true }, metadata)\r\n\t\t}\r\n\t\t// Just an international phone number is supplied\r\n\t\t// `format('+78005553535', 'NATIONAL', [options], metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (typeof arg_2 !== 'string')\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('`format` argument not passed to `formatNumber(number, format)`')\r\n\t\t\t}\r\n\r\n\t\t\tformat = arg_2\r\n\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { extended: true }, metadata)\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed number object.\r\n\t// `format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', [options], metadata)`.\r\n\telse if (isObject(arg_1))\r\n\t{\r\n\t\tinput  = arg_1\r\n\t\tformat = arg_2\r\n\r\n\t\tif (arg_4)\r\n\t\t{\r\n\t\t\toptions  = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t}\r\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\r\n\t// Legacy lowercase formats.\r\n\tif (format === 'International') {\r\n\t\tformat = 'INTERNATIONAL'\r\n\t} else if (format === 'National') {\r\n\t\tformat = 'NATIONAL'\r\n\t}\r\n\r\n\treturn {\r\n\t\tinput,\r\n\t\tformat,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,aAAa,MAAM,cAAc;AACxC,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,QAAQ,MAAM,wBAAwB;AAE7C,eAAe,SAASC,YAAYA,CAAA,EAAG;EACtC,IAAAC,mBAAA,GAKIC,kBAAkB,CAACC,SAAS,CAAC;IAJhCC,KAAK,GAAAH,mBAAA,CAALG,KAAK;IACLC,MAAM,GAAAJ,mBAAA,CAANI,MAAM;IACNC,OAAO,GAAAL,mBAAA,CAAPK,OAAO;IACPC,QAAQ,GAAAN,mBAAA,CAARM,QAAQ;EAGT,OAAOV,aAAa,CAACO,KAAK,EAAEC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,CAAC;AACvD;;AAEA;AACA,SAASL,kBAAkBA,CAACM,IAAI,EAChC;EACC,IAAAC,qBAAA,GAA4CC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACL,IAAI,CAAC;IAAAM,sBAAA,GAAAC,cAAA,CAAAN,qBAAA;IAArEO,KAAK,GAAAF,sBAAA;IAAEG,KAAK,GAAAH,sBAAA;IAAEI,KAAK,GAAAJ,sBAAA;IAAEK,KAAK,GAAAL,sBAAA;IAAEM,KAAK,GAAAN,sBAAA;EAExC,IAAIV,KAAK;EACT,IAAIC,MAAM;EACV,IAAIC,OAAO;EACX,IAAIC,QAAQ;;EAEZ;;EAEA;EACA;EACA,IAAI,OAAOS,KAAK,KAAK,QAAQ,EAC7B;IACC;IACA;IACA,IAAI,OAAOE,KAAK,KAAK,QAAQ,EAC7B;MACCb,MAAM,GAAGa,KAAK;MAEd,IAAIE,KAAK,EACT;QACCd,OAAO,GAAIa,KAAK;QAChBZ,QAAQ,GAAGa,KAAK;MACjB,CAAC,MAED;QACCb,QAAQ,GAAGY,KAAK;MACjB;MAEAf,KAAK,GAAGN,KAAK,CAACkB,KAAK,EAAE;QAAEK,cAAc,EAAEJ,KAAK;QAAEK,QAAQ,EAAE;MAAK,CAAC,EAAEf,QAAQ,CAAC;IAC1E;IACA;IACA;IAAA,KAEA;MACC,IAAI,OAAOU,KAAK,KAAK,QAAQ,EAC7B;QACC,MAAM,IAAIM,KAAK,CAAC,gEAAgE,CAAC;MAClF;MAEAlB,MAAM,GAAGY,KAAK;MAEd,IAAIE,KAAK,EACT;QACCb,OAAO,GAAIY,KAAK;QAChBX,QAAQ,GAAGY,KAAK;MACjB,CAAC,MAED;QACCZ,QAAQ,GAAGW,KAAK;MACjB;MAEAd,KAAK,GAAGN,KAAK,CAACkB,KAAK,EAAE;QAAEM,QAAQ,EAAE;MAAK,CAAC,EAAEf,QAAQ,CAAC;IACnD;EACD;EACA;EACA;EAAA,KACK,IAAIR,QAAQ,CAACiB,KAAK,CAAC,EACxB;IACCZ,KAAK,GAAIY,KAAK;IACdX,MAAM,GAAGY,KAAK;IAEd,IAAIE,KAAK,EACT;MACCb,OAAO,GAAIY,KAAK;MAChBX,QAAQ,GAAGY,KAAK;IACjB,CAAC,MAED;MACCZ,QAAQ,GAAGW,KAAK;IACjB;EACD,CAAC,MACI,MAAM,IAAIM,SAAS,CAAC,oFAAoF,CAAC;;EAE9G;EACA,IAAInB,MAAM,KAAK,eAAe,EAAE;IAC/BA,MAAM,GAAG,eAAe;EACzB,CAAC,MAAM,IAAIA,MAAM,KAAK,UAAU,EAAE;IACjCA,MAAM,GAAG,UAAU;EACpB;EAEA,OAAO;IACND,KAAK,EAALA,KAAK;IACLC,MAAM,EAANA,MAAM;IACNC,OAAO,EAAPA,OAAO;IACPC,QAAQ,EAARA;EACD,CAAC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}